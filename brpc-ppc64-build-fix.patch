diff --git a/Makefile b/Makefile
index 574c63bb..a9f1a2f7 100644
--- a/Makefile
+++ b/Makefile
@@ -22,7 +22,7 @@ include config.mk
 # 1. Added -fno-omit-frame-pointer: perf/tcmalloc-profiler use frame pointers by default
 # 2. Removed -Werror: Not block compilation for non-vital warnings, especially when the
 #    code is tested on newer systems. If the code is used in production, add -Werror back
-CPPFLAGS+=-DBTHREAD_USE_FAST_PTHREAD_MUTEX -D_GNU_SOURCE -DUSE_SYMBOLIZE -DNO_TCMALLOC -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS -DNDEBUG -DBRPC_REVISION=\"$(shell ./tools/get_brpc_revision.sh .)\"
+CPPFLAGS+=-DBTHREAD_USE_FAST_PTHREAD_MUTEX -D_GNU_SOURCE -DUSE_SYMBOLIZE -DNO_TCMALLOC -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS  -DBRPC_REVISION=\"$(shell ./tools/get_brpc_revision.sh .)\"
 CXXFLAGS=$(CPPFLAGS) -O2 -pipe -Wall -W -fPIC -fstrict-aliasing -Wno-invalid-offsetof -Wno-unused-parameter -fno-omit-frame-pointer -std=c++0x
 CFLAGS=$(CPPFLAGS) -O2 -pipe -Wall -W -fPIC -fstrict-aliasing -Wno-unused-parameter -fno-omit-frame-pointer
 DEBUG_CXXFLAGS = $(filter-out -DNDEBUG,$(CXXFLAGS)) -DUNIT_TEST -DBVAR_NOT_LINK_DEFAULT_VARIABLES
@@ -165,6 +165,7 @@ BUTIL_SOURCES = \
     src/butil/recordio.cc \
     src/butil/popen.cpp
 
+
 ifeq ($(SYSTEM), Linux)
     BUTIL_SOURCES += src/butil/file_util_linux.cc \
         src/butil/threading/platform_thread_linux.cc \
diff --git a/example/echo_c++/Makefile b/example/echo_c++/Makefile
index fddde8cb..de7c5e4c 100644
--- a/example/echo_c++/Makefile
+++ b/example/echo_c++/Makefile
@@ -1,93 +1,252 @@
-# Licensed to the Apache Software Foundation (ASF) under one
-# or more contributor license agreements.  See the NOTICE file
-# distributed with this work for additional information
-# regarding copyright ownership.  The ASF licenses this file
-# to you under the Apache License, Version 2.0 (the
-# "License"); you may not use this file except in compliance
-# with the License.  You may obtain a copy of the License at
-#
-#   http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing,
-# software distributed under the License is distributed on an
-# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-# KIND, either express or implied.  See the License for the
-# specific language governing permissions and limitations
-# under the License.
-
-NEED_GPERFTOOLS=0
-BRPC_PATH=../..
-include $(BRPC_PATH)/config.mk
-# Notes on the flags:
-# 1. Added -fno-omit-frame-pointer: perf/tcmalloc-profiler use frame pointers by default
-CXXFLAGS+=$(CPPFLAGS) -std=c++0x -DNDEBUG -O2 -pipe -W -Wall -Wno-unused-parameter -fPIC -fno-omit-frame-pointer
-ifeq ($(NEED_GPERFTOOLS), 1)
-	CXXFLAGS+=-DBRPC_ENABLE_CPU_PROFILER
-endif
-HDRS+=$(BRPC_PATH)/output/include
-LIBS+=$(BRPC_PATH)/output/lib
-
-HDRPATHS=$(addprefix -I, $(HDRS))
-LIBPATHS=$(addprefix -L, $(LIBS))
-COMMA=,
-SOPATHS=$(addprefix -Wl$(COMMA)-rpath$(COMMA), $(LIBS))
-
-CLIENT_SOURCES = client.cpp
-SERVER_SOURCES = server.cpp
-PROTOS = $(wildcard *.proto)
-
-PROTO_OBJS = $(PROTOS:.proto=.pb.o)
-PROTO_GENS = $(PROTOS:.proto=.pb.h) $(PROTOS:.proto=.pb.cc)
-CLIENT_OBJS = $(addsuffix .o, $(basename $(CLIENT_SOURCES))) 
-SERVER_OBJS = $(addsuffix .o, $(basename $(SERVER_SOURCES))) 
-
-ifeq ($(SYSTEM),Darwin)
- ifneq ("$(LINK_SO)", "")
-	STATIC_LINKINGS += -lbrpc
- else
-	# *.a must be explicitly specified in clang
-	STATIC_LINKINGS += $(BRPC_PATH)/output/lib/libbrpc.a
- endif
-	LINK_OPTIONS_SO = $^ $(STATIC_LINKINGS) $(DYNAMIC_LINKINGS)
-	LINK_OPTIONS = $^ $(STATIC_LINKINGS) $(DYNAMIC_LINKINGS)
-else ifeq ($(SYSTEM),Linux)
-	STATIC_LINKINGS += -lbrpc
-	LINK_OPTIONS_SO = -Xlinker "-(" $^ -Xlinker "-)" $(STATIC_LINKINGS) $(DYNAMIC_LINKINGS)
-	LINK_OPTIONS = -Xlinker "-(" $^ -Wl,-Bstatic $(STATIC_LINKINGS) -Wl,-Bdynamic -Xlinker "-)" $(DYNAMIC_LINKINGS)
-endif
-
-.PHONY:all
-all: echo_client echo_server
-
-.PHONY:clean
+# CMAKE generated file: DO NOT EDIT!
+# Generated by "Unix Makefiles" Generator, CMake Version 3.20
+
+# Default target executed when no arguments are given to make.
+default_target: all
+.PHONY : default_target
+
+# Allow only one "make -f Makefile2" at a time, but pass parallelism.
+.NOTPARALLEL:
+
+#=============================================================================
+# Special targets provided by cmake.
+
+# Disable implicit rules so canonical targets will work.
+.SUFFIXES:
+
+# Disable VCS-based implicit rules.
+% : %,v
+
+# Disable VCS-based implicit rules.
+% : RCS/%
+
+# Disable VCS-based implicit rules.
+% : RCS/%,v
+
+# Disable VCS-based implicit rules.
+% : SCCS/s.%
+
+# Disable VCS-based implicit rules.
+% : s.%
+
+.SUFFIXES: .hpux_make_needs_suffix_list
+
+# Command-line flag to silence nested $(MAKE).
+$(VERBOSE)MAKESILENT = -s
+
+#Suppress display of executed commands.
+$(VERBOSE).SILENT:
+
+# A target that is always out of date.
+cmake_force:
+.PHONY : cmake_force
+
+#=============================================================================
+# Set environment variables for the build.
+
+# The shell in which to execute make rules.
+SHELL = /bin/sh
+
+# The CMake executable.
+CMAKE_COMMAND = /usr/bin/cmake
+
+# The command to remove a file.
+RM = /usr/bin/cmake -E rm -f
+
+# Escaping for special characters.
+EQUALS = =
+
+# The top-level source directory on which CMake was run.
+CMAKE_SOURCE_DIR = /home/brpc/example/echo_c++
+
+# The top-level build directory on which CMake was run.
+CMAKE_BINARY_DIR = /home/brpc/example/echo_c++
+
+#=============================================================================
+# Targets provided globally by CMake.
+
+# Special rule for the target rebuild_cache
+rebuild_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake to regenerate build system..."
+	/usr/bin/cmake --regenerate-during-build -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+.PHONY : rebuild_cache
+
+# Special rule for the target rebuild_cache
+rebuild_cache/fast: rebuild_cache
+.PHONY : rebuild_cache/fast
+
+# Special rule for the target edit_cache
+edit_cache:
+	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake cache editor..."
+	/usr/bin/ccmake -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
+.PHONY : edit_cache
+
+# Special rule for the target edit_cache
+edit_cache/fast: edit_cache
+.PHONY : edit_cache/fast
+
+# The main all target
+all: cmake_check_build_system
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/brpc/example/echo_c++/CMakeFiles /home/brpc/example/echo_c++//CMakeFiles/progress.marks
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 all
+	$(CMAKE_COMMAND) -E cmake_progress_start /home/brpc/example/echo_c++/CMakeFiles 0
+.PHONY : all
+
+# The main clean target
 clean:
-	@echo "> Cleaning"
-	rm -rf echo_client echo_server $(PROTO_GENS) $(PROTO_OBJS) $(CLIENT_OBJS) $(SERVER_OBJS)
-
-echo_client:$(PROTO_OBJS) $(CLIENT_OBJS)
-	@echo "> Linking $@"
-ifneq ("$(LINK_SO)", "")
-	$(CXX) $(LIBPATHS) $(SOPATHS) $(LINK_OPTIONS_SO) -o $@
-else
-	$(CXX) $(LIBPATHS) $(LINK_OPTIONS) -o $@
-endif
-
-echo_server:$(PROTO_OBJS) $(SERVER_OBJS)
-	@echo "> Linking $@"
-ifneq ("$(LINK_SO)", "")
-	$(CXX) $(LIBPATHS) $(SOPATHS) $(LINK_OPTIONS_SO) -o $@
-else
-	$(CXX) $(LIBPATHS) $(LINK_OPTIONS) -o $@
-endif
-
-%.pb.cc %.pb.h:%.proto
-	@echo "> Generating $@"
-	$(PROTOC) --cpp_out=. --proto_path=. $(PROTOC_EXTRA_ARGS) $<
-
-%.o:%.cpp
-	@echo "> Compiling $@"
-	$(CXX) -c $(HDRPATHS) $(CXXFLAGS) $< -o $@
-
-%.o:%.cc
-	@echo "> Compiling $@"
-	$(CXX) -c $(HDRPATHS) $(CXXFLAGS) $< -o $@
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 clean
+.PHONY : clean
+
+# The main clean target
+clean/fast: clean
+.PHONY : clean/fast
+
+# Prepare targets for installation.
+preinstall: all
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 preinstall
+.PHONY : preinstall
+
+# Prepare targets for installation.
+preinstall/fast:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 preinstall
+.PHONY : preinstall/fast
+
+# clear depends
+depend:
+	$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 1
+.PHONY : depend
+
+#=============================================================================
+# Target rules for targets named echo_client
+
+# Build rule for target.
+echo_client: cmake_check_build_system
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 echo_client
+.PHONY : echo_client
+
+# fast build rule for target.
+echo_client/fast:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/echo_client.dir/build.make CMakeFiles/echo_client.dir/build
+.PHONY : echo_client/fast
+
+#=============================================================================
+# Target rules for targets named echo_server
+
+# Build rule for target.
+echo_server: cmake_check_build_system
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 echo_server
+.PHONY : echo_server
+
+# fast build rule for target.
+echo_server/fast:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/echo_server.dir/build.make CMakeFiles/echo_server.dir/build
+.PHONY : echo_server/fast
+
+client.o: client.cpp.o
+.PHONY : client.o
+
+# target to build an object file
+client.cpp.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/echo_client.dir/build.make CMakeFiles/echo_client.dir/client.cpp.o
+.PHONY : client.cpp.o
+
+client.i: client.cpp.i
+.PHONY : client.i
+
+# target to preprocess a source file
+client.cpp.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/echo_client.dir/build.make CMakeFiles/echo_client.dir/client.cpp.i
+.PHONY : client.cpp.i
+
+client.s: client.cpp.s
+.PHONY : client.s
+
+# target to generate assembly for a file
+client.cpp.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/echo_client.dir/build.make CMakeFiles/echo_client.dir/client.cpp.s
+.PHONY : client.cpp.s
+
+echo.pb.o: echo.pb.cc.o
+.PHONY : echo.pb.o
+
+# target to build an object file
+echo.pb.cc.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/echo_client.dir/build.make CMakeFiles/echo_client.dir/echo.pb.cc.o
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/echo_server.dir/build.make CMakeFiles/echo_server.dir/echo.pb.cc.o
+.PHONY : echo.pb.cc.o
+
+echo.pb.i: echo.pb.cc.i
+.PHONY : echo.pb.i
+
+# target to preprocess a source file
+echo.pb.cc.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/echo_client.dir/build.make CMakeFiles/echo_client.dir/echo.pb.cc.i
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/echo_server.dir/build.make CMakeFiles/echo_server.dir/echo.pb.cc.i
+.PHONY : echo.pb.cc.i
+
+echo.pb.s: echo.pb.cc.s
+.PHONY : echo.pb.s
+
+# target to generate assembly for a file
+echo.pb.cc.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/echo_client.dir/build.make CMakeFiles/echo_client.dir/echo.pb.cc.s
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/echo_server.dir/build.make CMakeFiles/echo_server.dir/echo.pb.cc.s
+.PHONY : echo.pb.cc.s
+
+server.o: server.cpp.o
+.PHONY : server.o
+
+# target to build an object file
+server.cpp.o:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/echo_server.dir/build.make CMakeFiles/echo_server.dir/server.cpp.o
+.PHONY : server.cpp.o
+
+server.i: server.cpp.i
+.PHONY : server.i
+
+# target to preprocess a source file
+server.cpp.i:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/echo_server.dir/build.make CMakeFiles/echo_server.dir/server.cpp.i
+.PHONY : server.cpp.i
+
+server.s: server.cpp.s
+.PHONY : server.s
+
+# target to generate assembly for a file
+server.cpp.s:
+	$(MAKE) $(MAKESILENT) -f CMakeFiles/echo_server.dir/build.make CMakeFiles/echo_server.dir/server.cpp.s
+.PHONY : server.cpp.s
+
+# Help Target
+help:
+	@echo "The following are some of the valid targets for this Makefile:"
+	@echo "... all (the default if no target is provided)"
+	@echo "... clean"
+	@echo "... depend"
+	@echo "... edit_cache"
+	@echo "... rebuild_cache"
+	@echo "... echo_client"
+	@echo "... echo_server"
+	@echo "... client.o"
+	@echo "... client.i"
+	@echo "... client.s"
+	@echo "... echo.pb.o"
+	@echo "... echo.pb.i"
+	@echo "... echo.pb.s"
+	@echo "... server.o"
+	@echo "... server.i"
+	@echo "... server.s"
+.PHONY : help
+
+
+
+#=============================================================================
+# Special targets to cleanup operation of make.
+
+# Special rule to run CMake to check the build system integrity.
+# No rule that depends on this can have commands that come from listfiles
+# because they might be regenerated.
+cmake_check_build_system:
+	$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0
+.PHONY : cmake_check_build_system
+
diff --git a/src/bthread/context.cpp b/src/bthread/context.cpp
index b89d432a..5597c0bb 100644
--- a/src/bthread/context.cpp
+++ b/src/bthread/context.cpp
@@ -810,3 +810,144 @@ __asm (
 
 #endif
 
+#if defined(BTHREAD_CONTEXT_PLATFORM_linux_ppc64) && defined(BTHREAD_CONTEXT_COMPILER_gcc)
+__asm (
+"	.text\n"
+"	.align 2\n"
+".globl bthread_make_fcontext\n"
+".type   bthread_make_fcontext, @function\n"
+"bthread_make_fcontext:\n"
+"	addis	%r2, %r12, .TOC.-bthread_make_fcontext@ha\n"
+"	addi	%r2, %r2, .TOC.-bthread_make_fcontext@l\n"
+"	.localentry bthread_make_fcontext, . - bthread_make_fcontext\n"
+"    ;# save return address into R6\n"
+"    mflr  %r6\n"
+"    ;# first arg of bthread_make_fcontext() == top address of context-stack\n"
+"    ;# shift address in R3 to lower 16 byte boundary\n"
+"    clrrdi  %r3, %r3, 4\n"
+"    ;# reserve space for context-data on context-stack\n"
+"    ;# including 64 byte of linkage + parameter area (R1 % 16 == 0)\n"
+"    subi  %r3, %r3, 248\n"
+"    ;# third arg of bthread_make_fcontext() == address of context-function\n"
+"    ;# entry point (ELFv2) or descriptor (ELFv1)\n"
+"    ;# save address of context-function entry point\n"
+"    std  %r5, 176(%r3)\n"
+"    ;# set back-chain to zero\n"
+"    li   %r0, 0\n"
+"    std  %r0, 184(%r3)\n"
+"    ;# load LR\n"
+"    mflr  %r0\n"
+"    ;# jump to label 1\n"
+"    bl  1f\n"
+"1:\n"
+"    ;# load LR into R4\n"
+"    mflr  %r4\n"
+"    ;# compute abs address of label finish\n"
+"    addi  %r4, %r4, finish - 1b\n"
+"    ;# restore LR\n"
+"    mtlr  %r0\n"
+"    ;# save address of finish as return-address for context-function\n"
+"    ;# will be entered after context-function returns\n"
+"    std  %r4, 168(%r3)\n"
+"    ;# restore return address from R6\n"
+"    mtlr  %r6\n"
+"    blr  # return pointer to context-data\n"
+"finish:\n"
+"    ;# save return address into R0\n"
+"    mflr  %r0\n"
+"    ;# save return address on stack, set up stack frame\n"
+"    std  %r0, 8(%r1)\n"
+"    ;# allocate stack space, R1 % 16 == 0\n"
+"    stdu  %r1, -32(%r1)\n"
+"    ;# exit code is zero\n"
+"    li  %r3, 0\n"
+"    ;# exit application\n"
+"    bl  _exit\n"
+"    nop\n"
+".size bthread_make_fcontext, .-bthread_make_fcontext\n"
+".section .note.GNU-stack,\"\",%progbits\n"
+);
+#endif
+
+#if defined(BTHREAD_CONTEXT_PLATFORM_linux_ppc64) && defined(BTHREAD_CONTEXT_COMPILER_gcc)
+__asm (
+"	.text\n"
+"	.align 2\n"
+".globl bthread_jump_fcontext\n"
+".type  bthread_jump_fcontext, @function\n"
+"bthread_jump_fcontext:\n"
+"       addis   %r2, %r12, .TOC.-bthread_jump_fcontext@ha\n"
+"        addi    %r2, %r2, .TOC.-bthread_jump_fcontext@l\n"
+"        .localentry bthread_jump_fcontext, . - bthread_jump_fcontext\n"
+"    ;# reserve space on stack\n"
+"    subi  %r1, %r1, 184\n"
+"    std  %r14, 8(%r1)  ;# save R14\n"
+"    std  %r15, 16(%r1)  ;# save R15\n"
+"    std  %r16, 24(%r1)  ;# save R16\n"
+"    std  %r17, 32(%r1)  ;# save R17\n"
+"    std  %r18, 40(%r1)  ;# save R18\n"
+"    std  %r19, 48(%r1)  ;# save R19\n"
+"    std  %r20, 56(%r1)  ;# save R20\n"
+"    std  %r21, 64(%r1)  ;# save R21\n"
+"    std  %r22, 72(%r1)  ;# save R22\n"
+"    std  %r23, 80(%r1)  ;# save R23\n"
+"    std  %r24, 88(%r1)  ;# save R24\n"
+"    std  %r25, 96(%r1)  ;# save R25\n"
+"    std  %r26, 104(%r1)  ;# save R26\n"
+"    std  %r27, 112(%r1)  ;# save R27\n"
+"    std  %r28, 120(%r1)  ;# save R28\n"
+"    std  %r29, 128(%r1)  ;# save R29\n"
+"    std  %r30, 136(%r1)  ;# save R30\n"
+"    std  %r31, 144(%r1)  ;# save R31\n"
+"    ;# save CR\n"
+"    mfcr  %r0\n"
+"    std   %r0, 160(%r1)\n"
+"    ;# save LR\n"
+"    mflr  %r0\n"
+"    std   %r0, 168(%r1)\n"
+"    ;# save LR as PC\n"
+"    std   %r0, 176(%r1)\n"
+"    ;# store RSP (pointing to context-data) in R6\n"
+"    mr  %r6, %r1\n"
+"    ;# restore RSP (pointing to context-data) from R3\n"
+"    mr  %r1, %r3\n"
+"    ld  %r14, 8(%r1)  ;# restore R14\n"
+"    ld  %r15, 16(%r1)  ;# restore R15\n"
+"    ld  %r16, 24(%r1)  ;# restore R16\n"
+"    ld  %r17, 32(%r1)  ;# restore R17\n"
+"    ld  %r18, 40(%r1)  ;# restore R18\n"
+"    ld  %r19, 48(%r1)  ;# restore R19\n"
+"    ld  %r20, 56(%r1)  ;# restore R20\n"
+"    ld  %r21, 64(%r1)  ;# restore R21\n"
+"    ld  %r22, 72(%r1)  ;# restore R22\n"
+"    ld  %r23, 80(%r1)  ;# restore R23\n"
+"    ld  %r24, 88(%r1)  ;# restore R24\n"
+"    ld  %r25, 96(%r1)  ;# restore R25\n"
+"    ld  %r26, 104(%r1)  ;# restore R26\n"
+"    ld  %r27, 112(%r1)  ;# restore R27\n"
+"    ld  %r28, 120(%r1)  ;# restore R28\n"
+"    ld  %r29, 128(%r1)  ;# restore R29\n"
+"    ld  %r30, 136(%r1)  ;# restore R30\n"
+"    ld  %r31, 144(%r1)  ;# restore R31\n"
+"    ;# restore CR\n"
+"    ld  %r0, 160(%r1)\n"
+"    mtcr  %r0\n"
+"    ;# restore LR\n"
+"    ld  %r0, 168(%r1)\n"
+"    mtlr  %r0\n"
+"    ;# load PC\n"
+"    ld  %r12, 176(%r1)\n"
+"    ;# restore CTR\n"
+"    mtctr  %r12\n"
+"    ;# adjust stack\n"
+"    addi  %r1, %r1, 184\n"
+"   ;# copy transfer_t into transfer_fn arg registers\n"
+"    mr  %r3, %r6\n"
+"   ;# arg pointer already in %r4\n"
+"    ;# jump to context\n"
+"    bctr\n"
+".size bthread_jump_fcontext, .-bthread_jump_fcontext\n"
+".section .note.GNU-stack,\"\",%progbits\n"
+);
+#endif
+
diff --git a/src/bthread/context.h b/src/bthread/context.h
index ef98e458..ff0fe6bf 100644
--- a/src/bthread/context.h
+++ b/src/bthread/context.h
@@ -39,6 +39,9 @@
 	#elif __aarch64__
 	    #define BTHREAD_CONTEXT_PLATFORM_linux_arm64
 	    #define BTHREAD_CONTEXT_CALL_CONVENTION
+        #elif defined(__powerpc64__) || defined(__ppc64__)
+	    #define BTHREAD_CONTEXT_PLATFORM_linux_ppc64
+            #define BTHREAD_CONTEXT_CALL_CONVENTION
 	#endif
 
   #elif defined(__MINGW32__) || defined (__MINGW64__)
diff --git a/src/bthread/processor.h b/src/bthread/processor.h
index 2f5badf9..e5779f86 100644
--- a/src/bthread/processor.h
+++ b/src/bthread/processor.h
@@ -15,7 +15,7 @@
 // specific language governing permissions and limitations
 // under the License.
 
-// bthread - An M:N threading library to make applications more concurrent.
+// bthread - A M:N threading library to make applications more concurrent.
 
 // Date: Fri Dec  5 13:40:57 CST 2014
 
@@ -28,6 +28,8 @@
 # ifndef cpu_relax
 #if defined(ARCH_CPU_ARM_FAMILY)
 # define cpu_relax() asm volatile("yield\n": : :"memory")
+#elif defined(ARCH_CPU_PPC_FAMILY)
+# define cpu_relax() asm volatile("or 27,27,27" : : : "memory")
 #else
 # define cpu_relax() asm volatile("pause\n": : :"memory")
 #endif
diff --git a/src/bthread/task_group.cpp b/src/bthread/task_group.cpp
index 6f5a4abd..4836d10d 100644
--- a/src/bthread/task_group.cpp
+++ b/src/bthread/task_group.cpp
@@ -610,7 +610,7 @@ void TaskGroup::sched_to(TaskGroup** pg, TaskMeta* next_meta) {
                       << next_meta->tid;
         }
 
-        if (cur_meta->stack != NULL) {
+        if ((cur_meta->stack != NULL) && (next_meta->stack != NULL)) {
             if (next_meta->stack != cur_meta->stack) {
                 jump_stack(cur_meta->stack, next_meta->stack);
                 // probably went to another group, need to assign g again.
@@ -623,7 +623,9 @@ void TaskGroup::sched_to(TaskGroup** pg, TaskMeta* next_meta) {
                 CHECK(cur_meta->stack == g->_main_stack);
             }
 #endif
-        }
+        } else {
+        	LOG(FATAL) << "bthread=" << g->current_tid() << " next thread stacck pointer is 0!";
+	}
         // else because of ending_sched(including pthread_task->pthread_task)
     } else {
         LOG(FATAL) << "bthread=" << g->current_tid() << " sched_to itself!";
diff --git a/src/butil/atomicops.h b/src/butil/atomicops.h
index ba6b0fd9..4d5ff142 100644
--- a/src/butil/atomicops.h
+++ b/src/butil/atomicops.h
@@ -153,6 +153,8 @@ Atomic64 Release_Load(volatile const Atomic64* ptr);
 #include "butil/atomicops_internals_arm64_gcc.h"
 #elif defined(COMPILER_GCC) && defined(ARCH_CPU_X86_FAMILY)
 #include "butil/atomicops_internals_x86_gcc.h"
+#elif defined(COMPILER_GCC) && defined(ARCH_CPU_PPC_FAMILY)
+#include "butil/atomicops_internals_gcc.h"
 #elif defined(COMPILER_GCC) && defined(ARCH_CPU_MIPS_FAMILY)
 #include "butil/atomicops_internals_mips_gcc.h"
 #else
diff --git a/src/butil/atomicops_internals_gcc.h b/src/butil/atomicops_internals_gcc.h
index 4ba9bf4f..38887bdb 100644
--- a/src/butil/atomicops_internals_gcc.h
+++ b/src/butil/atomicops_internals_gcc.h
@@ -12,6 +12,7 @@
 namespace butil {
 namespace subtle {
 
+
 inline Atomic32 NoBarrier_CompareAndSwap(volatile Atomic32* ptr,
                                          Atomic32 old_value,
                                          Atomic32 new_value) {
@@ -23,6 +24,17 @@ inline Atomic32 NoBarrier_CompareAndSwap(volatile Atomic32* ptr,
   } while (prev_value == old_value);
   return prev_value;
 }
+inline Atomic64 NoBarrier_CompareAndSwap(volatile Atomic64* ptr,
+                                         Atomic64 old_value,
+                                         Atomic64 new_value) {
+  Atomic64 prev_value;
+  do {
+    if (__sync_bool_compare_and_swap(ptr, old_value, new_value))
+      return old_value;
+    prev_value = *ptr;
+  } while (prev_value == old_value);
+  return prev_value;
+}
 
 inline Atomic32 NoBarrier_AtomicExchange(volatile Atomic32* ptr,
                                          Atomic32 new_value) {
@@ -32,11 +44,23 @@ inline Atomic32 NoBarrier_AtomicExchange(volatile Atomic32* ptr,
   } while (!__sync_bool_compare_and_swap(ptr, old_value, new_value));
   return old_value;
 }
+inline Atomic64 NoBarrier_AtomicExchange(volatile Atomic64* ptr,
+                                         Atomic64 new_value) {
+  Atomic64 old_value;
+  do {
+    old_value = *ptr;
+  } while (!__sync_bool_compare_and_swap(ptr, old_value, new_value));
+  return old_value;
+}
 
 inline Atomic32 NoBarrier_AtomicIncrement(volatile Atomic32* ptr,
                                           Atomic32 increment) {
   return Barrier_AtomicIncrement(ptr, increment);
 }
+inline Atomic64 NoBarrier_AtomicIncrement(volatile Atomic64* ptr,
+                                          Atomic64 increment) {
+  return Barrier_AtomicIncrement(ptr, increment);
+}
 
 inline Atomic32 Barrier_AtomicIncrement(volatile Atomic32* ptr,
                                         Atomic32 increment) {
@@ -51,6 +75,19 @@ inline Atomic32 Barrier_AtomicIncrement(volatile Atomic32* ptr,
     // Otherwise, *ptr changed mid-loop and we need to retry.
   }
 }
+inline Atomic64 Barrier_AtomicIncrement(volatile Atomic64* ptr,
+                                        Atomic64 increment) {
+  for (;;) {
+    // Atomic exchange the old value with an incremented one.
+    Atomic64 old_value = *ptr;
+    Atomic64 new_value = old_value + increment;
+    if (__sync_bool_compare_and_swap(ptr, old_value, new_value)) {
+      // The exchange took place as expected.
+      return new_value;
+    }
+    // Otherwise, *ptr changed mid-loop and we need to retry.
+  }
+}
 
 inline Atomic32 Acquire_CompareAndSwap(volatile Atomic32* ptr,
                                        Atomic32 old_value,
@@ -59,16 +96,31 @@ inline Atomic32 Acquire_CompareAndSwap(volatile Atomic32* ptr,
   // is a full memory barrier, none is needed here or below in Release.
   return NoBarrier_CompareAndSwap(ptr, old_value, new_value);
 }
+inline Atomic64 Acquire_CompareAndSwap(volatile Atomic64* ptr,
+                                       Atomic64 old_value,
+                                       Atomic64 new_value) {
+  // Since NoBarrier_CompareAndSwap uses __sync_bool_compare_and_swap, which
+  // is a full memory barrier, none is needed here or below in Release.
+  return NoBarrier_CompareAndSwap(ptr, old_value, new_value);
+}
 
 inline Atomic32 Release_CompareAndSwap(volatile Atomic32* ptr,
                                        Atomic32 old_value,
                                        Atomic32 new_value) {
   return NoBarrier_CompareAndSwap(ptr, old_value, new_value);
 }
+inline Atomic64 Release_CompareAndSwap(volatile Atomic64* ptr,
+                                       Atomic64 old_value,
+                                       Atomic64 new_value) {
+  return NoBarrier_CompareAndSwap(ptr, old_value, new_value);
+}
 
 inline void NoBarrier_Store(volatile Atomic32* ptr, Atomic32 value) {
   *ptr = value;
 }
+inline void NoBarrier_Store(volatile Atomic64* ptr, Atomic64 value) {
+  *ptr = value;
+}
 
 inline void MemoryBarrier() {
   __sync_synchronize();
@@ -78,28 +130,49 @@ inline void Acquire_Store(volatile Atomic32* ptr, Atomic32 value) {
   *ptr = value;
   MemoryBarrier();
 }
+inline void Acquire_Store(volatile Atomic64* ptr, Atomic64 value) {
+  *ptr = value;
+  MemoryBarrier();
+}
 
 inline void Release_Store(volatile Atomic32* ptr, Atomic32 value) {
   MemoryBarrier();
   *ptr = value;
 }
+inline void Release_Store(volatile Atomic64* ptr, Atomic64 value) {
+  MemoryBarrier();
+  *ptr = value;
+}
 
 inline Atomic32 NoBarrier_Load(volatile const Atomic32* ptr) {
   return *ptr;
 }
+inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {
+  return *ptr;
+}
 
 inline Atomic32 Acquire_Load(volatile const Atomic32* ptr) {
   Atomic32 value = *ptr;
   MemoryBarrier();
   return value;
 }
+inline Atomic64 Acquire_Load(volatile const Atomic64* ptr) {
+  Atomic64 value = *ptr;
+  MemoryBarrier();
+  return value;
+}
 
 inline Atomic32 Release_Load(volatile const Atomic32* ptr) {
   MemoryBarrier();
   return *ptr;
 }
+inline Atomic64 Release_Load(volatile const Atomic64* ptr) {
+  MemoryBarrier();
+  return *ptr;
+}
 
 }  // namespace butil::subtle
 }  // namespace butil
 
 #endif  // BUTIL_ATOMICOPS_INTERNALS_GCC_H_
+
diff --git a/src/butil/build_config.h b/src/butil/build_config.h
index 03e2cf74..65fe2dba 100644
--- a/src/butil/build_config.h
+++ b/src/butil/build_config.h
@@ -118,6 +118,10 @@
 #define ARCH_CPU_ARM64 1
 #define ARCH_CPU_64_BITS 1
 #define ARCH_CPU_LITTLE_ENDIAN 1
+#elif defined(_ARCH_PPC64)
+#define ARCH_CPU_PPC_FAMILY 1
+#define ARCH_CPU_64_BITS 1
+#define ARCH_CPU_LITTLE_ENDIAN 1
 #elif defined(__pnacl__)
 #define ARCH_CPU_32_BITS 1
 #define ARCH_CPU_LITTLE_ENDIAN 1
diff --git a/src/butil/debug/debugger_posix.cc b/src/butil/debug/debugger_posix.cc
index 18529b78..35276b67 100644
--- a/src/butil/debug/debugger_posix.cc
+++ b/src/butil/debug/debugger_posix.cc
@@ -220,9 +220,9 @@ void DebugBreak() {
     DEBUG_BREAK_ASM();
 #else
     volatile int go = 0;
-    while (!go) {
-      butil::PlatformThread::Sleep(butil::TimeDelta::FromMilliseconds(100));
-    }
+    //while (!go) {
+     // butil::PlatformThread::Sleep(butil::TimeDelta::FromMilliseconds(100));
+    //}
 #endif
   }
 }
diff --git a/src/butil/time.h b/src/butil/time.h
index 00949f8e..7f8ad45f 100644
--- a/src/butil/time.h
+++ b/src/butil/time.h
@@ -224,6 +224,10 @@ inline uint64_t clock_cycles() {
         : "=a" (lo), "=d" (hi)
         );
     return ((uint64_t)hi << 32) | lo;
+#elif defined(_ARCH_PPC64)
+    unsigned long long __tb;
+    __asm__ volatile ("mfspr %0, 268" : "=r" (__tb));
+    return __tb;
 #elif defined(__aarch64__)
     uint64_t virtual_timer_value;
     asm volatile("mrs %0, cntvct_el0" : "=r"(virtual_timer_value));
